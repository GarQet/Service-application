public class CaseTriggerHandler extends TriggerHandler {
    List<Case> newCases = (List<Case>) Trigger.new;
    
    public String createShortcutOfText(Integer getMaxLengthOfShortcut, String text, Boolean addExtraSymbols) {
        Integer textLength = text.length();
        if(textLength > getMaxLengthOfShortcut) {
            text = text.substring(0, getMaxLengthOfShortcut - 3) + '...';
        }
        if(addExtraSymbols) {
            String changer = '[' + text + ']';
            text = changer;
        }
        return text;
    }
    
    public void setShortSummary() {
        List<Case> cases = [SELECT Id, Subject, Description, Short_Summary__c FROM Case WHERE Id IN :newCases];
        for (Case getDataCase: newCases) {
            String shortcut = '';
            if(getDataCase.Subject != null) {
                shortcut = createShortcutOfText(Constants.MAXIMAL_SUBJECT_LENGTH_OF_SHORT_SUMMARY, getDataCase.Subject, true);
            }
            if(getDataCase.Description != null) {
                shortcut = shortcut + ' ' + createShortcutOfText(Constants.MAXIMAL_DESCRIPTION_LENGTH_OF_SHORT_SUMMARY, getDataCase.Description, false);           
            }
            getDataCase.Short_Summary__c = shortcut;
        }
    }

    public String generateNameFromEmail(String emailAddress) {
        return emailAddress.substring(0, emailAddress.indexOf('@')).capitalize();
    }
    
    public Account createNewAccount(String name) {
        Account newAccount = new Account(
            Name = name + Constants.ACCOUNT_NAME_AUTOGENERATED_ALIAS
        );
        insert newAccount;
        return newAccount;
    }    
    
    public Contact createNewContact(Id id, String name, String emailAddress) {
        Contact newContact = new Contact(
            AccountId = id,
            LastName = name + Constants.CONTACT_NAME_AUTOGENERATED_ALIAS,
            Email = emailAddress
        );
        insert newContact;
        return newContact;
    }
    
    public void connectCreatedAccountWithContact(Id accountId, Id contactId) {
        List<Contact> contacts = [SELECT Account.Id FROM Contact WHERE Id =: contactId LIMIT 1];
        for(Contact getContactData : contacts) {
            getContactData.AccountId = accountId;
        }
        update contacts;
    }
    
    public void setContactAndAccountId() {
        Map<String, List<Id>> emailAddressToContactAndAccountIds = new Map<String, List<Id>>();
        for(Case getDataCase : newCases) {
            if(getDataCase.SuppliedEmail != null) { 
            	emailAddressToContactAndAccountIds.put(getDataCase.SuppliedEmail, new List<Id>());
            }
        }
        List<Contact> contacts = [SELECT Id, Account.Id, Email FROM Contact WHERE Email =: emailAddressToContactAndAccountIds.keySet()];
        for(Contact getContactData : contacts) {
        	emailAddressToContactAndAccountIds.put(getContactData.Email, new List<Id>{getContactData.Id, getContactData.Account.Id});
        }  
        for(Case getDataCase : newCases) {
            String email = getDataCase.SuppliedEmail;
            if(emailAddressToContactAndAccountIds.keySet().contains(email)) {
                List<Id> accountsAndContactIds = emailAddressToContactAndAccountIds.get(email);
                if(accountsAndContactIds.isEmpty()) {
                    Account newAccount = createNewAccount(generateNameFromEmail(email));
                    Contact newContact = createNewContact(newAccount.Id, generateNameFromEmail(email), email); 
                    getDataCase.AccountId = newAccount.Id;
                    getDataCase.ContactId = newContact.Id;
                    connectCreatedAccountWithContact(newAccount.Id, newContact.Id);
                } else if (accountsAndContactIds[1] == null) {
                    Account newAccount = createNewAccount(generateNameFromEmail(email));
                    getDataCase.AccountId = newAccount.Id;
                    getDataCase.ContactId = accountsAndContactIds[0];
                    connectCreatedAccountWithContact(newAccount.Id, accountsAndContactIds[0]);
                } else {
                    getDataCase.AccountId = accountsAndContactIds[1];
                    getDataCase.ContactId = accountsAndContactIds[0];
                }
            }
        }
    }
    
    public override void beforeInsert() {
        setShortSummary();
        setContactAndAccountId(); 
    }
}