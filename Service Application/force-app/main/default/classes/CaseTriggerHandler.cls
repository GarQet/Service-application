public class CaseTriggerHandler extends TriggerHandler {
    List<Case> newCases = (List<Case>) Trigger.new;

    public override void beforeInsert() {
        setShortSummary();
        setContactAndAccountId(); 
    }

    public void setShortSummary() {
        for (Case newCase: newCases) {
            String shortcut = '';
            if(newCase.Subject != null) {
                shortcut = createShortcutOfText(Constants.MAXIMAL_SUBJECT_LENGTH_OF_SHORT_SUMMARY, newCase.Subject, true);
            }
            if(newCase.Description != null) {
                shortcut = shortcut + ' ' + createShortcutOfText(Constants.MAXIMAL_DESCRIPTION_LENGTH_OF_SHORT_SUMMARY, newCase.Description, false);           
            }
            newCase.Short_Summary__c = shortcut;
        }
    }  

    public String createShortcutOfText(Integer getMaxLengthOfShortcut, String text, Boolean addExtraSymbols) {
        Integer textLength = text.length();
        if(textLength > getMaxLengthOfShortcut) {
            text = text.substring(0, getMaxLengthOfShortcut - 3) + '...';
        }
        if(addExtraSymbols) {
            String changer = '[' + text + ']';
            text = changer;
        }
        return text;
    }

    public void setContactAndAccountId() {
        List<String> emailAddresses = new List<String>();
        Map<String, Contact> verifiedEmailToContact = new Map<String, Contact>();
        for(Case newCase : newCases) {
            if(newCase.SuppliedEmail != null) { 
                emailAddresses.add(newCase.SuppliedEmail);
            }
        }
        if(emailAddresses.size() > 0) {
            for(Contact contact : [SELECT Id, AccountId, Email FROM Contact WHERE Email IN :emailAddresses]) {
                verifiedEmailToContact.put(contact.Email, contact);
            }
            for(Case newCase : newCases) {
                String email = newCase.SuppliedEmail;
                if(!verifiedEmailToContact.containsKey(email)) {
                    Account newAccount = createNewAccount(email);
                    Contact newContact = createNewContact(newAccount.Id, email); 
                    newCase.AccountId = newAccount.Id;
                    newCase.ContactId = newContact.Id;
                } else {
                    Contact contact = verifiedEmailToContact.get(email);
                    newCase.AccountId = contact.AccountId;
                    newCase.ContactId = contact.Id;                        
                }
            }
        }
    }

    public String generateNameFromEmail(String emailAddress) {
        return emailAddress.substring(0, emailAddress.indexOf('@')).capitalize();
    }

    public Account createNewAccount(String emailAddress) {
        String name = generateNameFromEmail(emailAddress);
        Account newAccount = new Account(
            Name = name + Constants.ACCOUNT_NAME_AUTOGENERATED_ALIAS
        );
        insert newAccount;
        return newAccount;
    }    

    public Contact createNewContact(Id accountId, String emailAddress) {
        String name = generateNameFromEmail(emailAddress);
        Contact newContact = new Contact(
            AccountId = accountId,
            LastName = name + Constants.CONTACT_NAME_AUTOGENERATED_ALIAS,
            Email = emailAddress
        );
        insert newContact;
        return newContact;
    }  
}